{"ast":null,"code":"import _slicedToArray from\"C:/Users/Emir/Desktop/movies and tv shows app/movies-tvshows-db/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useEffect}from'react';import axios from'axios';import{MovieContext,TVContext,LocationURLContext,onPageLoadMoviesContext,onPageLoadTVContext,showSearchBarContext}from'../Context';import{jsx as _jsx}from\"react/jsx-runtime\";function Search(){var url_movies=\"https://api.themoviedb.org/3/search/movie?api_key=ea51221982d56a556eae4bf95cbfc41d&query=\";var url_tvshows=\"https://api.themoviedb.org/3/search/tv?api_key=ea51221982d56a556eae4bf95cbfc41d&query=\";var _useContext=useContext(LocationURLContext),locationURL=_useContext.locationURL;var _useContext2=useContext(MovieContext),setGlobalMovieList=_useContext2.setGlobalMovieList;var _useContext3=useContext(TVContext),setGlobalTVList=_useContext3.setGlobalTVList;var _useContext4=useContext(onPageLoadMoviesContext),movieListOnPageLoad=_useContext4.movieListOnPageLoad;var _useContext5=useContext(onPageLoadTVContext),TVListOnPageLoad=_useContext5.TVListOnPageLoad;var _useContext6=useContext(showSearchBarContext),showSearchBar=_useContext6.showSearchBar;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),searchQuery=_useState2[0],setSearchQueryState=_useState2[1];var url;var searchPlaceholderText=\"\";if(locationURL===\"movie\"){url=url_movies;searchPlaceholderText=\"search for movies...\";}else{url=url_tvshows;searchPlaceholderText=\"search for TV shows...\";}useEffect(function(){if(searchQuery.length>=3){var delay=setTimeout(function(){axios.get(url+searchQuery).then(function(response){var movieList=response.data.results;if(locationURL===\"movie\"){setGlobalMovieList(movieList);}else{setGlobalTVList(movieList);}});},1000);return function(){return clearTimeout(delay);};}else{setGlobalMovieList(movieListOnPageLoad);setGlobalTVList(TVListOnPageLoad);}// Attributes in the array below define when the search should be triggered\n// The second argument defines that the search should be triggered whenever user switches between\n// \"Movies\" and \"TV Shows\" tabs.\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[searchQuery,locationURL]);return/*#__PURE__*/_jsx(\"div\",{classList:\"searchWrap \",style:{display:showSearchBar},children:/*#__PURE__*/_jsx(\"div\",{id:\"search_bar_container\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"search_bar\",placeholder:searchPlaceholderText,onChange:function onChange(event){setSearchQueryState(event.target.value);}})})});}export default Search;","map":{"version":3,"sources":["C:/Users/Emir/Desktop/movies and tv shows app/movies-tvshows-db/src/Components/Search.js"],"names":["React","useState","useContext","useEffect","axios","MovieContext","TVContext","LocationURLContext","onPageLoadMoviesContext","onPageLoadTVContext","showSearchBarContext","Search","url_movies","url_tvshows","locationURL","setGlobalMovieList","setGlobalTVList","movieListOnPageLoad","TVListOnPageLoad","showSearchBar","searchQuery","setSearchQueryState","url","searchPlaceholderText","length","delay","setTimeout","get","then","response","movieList","data","results","clearTimeout","display","event","target","value"],"mappings":"sLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,SAAtC,KAAuD,OAAvD,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,YAAT,CAAuBC,SAAvB,CAAkCC,kBAAlC,CAAsDC,uBAAtD,CAA+EC,mBAA/E,CAAoGC,oBAApG,KAAgI,YAAhI,C,2CAEA,QAASC,CAAAA,MAAT,EAAkB,CACd,GAAMC,CAAAA,UAAU,CAAG,2FAAnB,CACA,GAAMC,CAAAA,WAAW,CAAG,wFAApB,CAEA,gBAAsBX,UAAU,CAACK,kBAAD,CAAhC,CAAOO,WAAP,aAAOA,WAAP,CACA,iBAA6BZ,UAAU,CAACG,YAAD,CAAvC,CAAOU,kBAAP,cAAOA,kBAAP,CACA,iBAA0Bb,UAAU,CAACI,SAAD,CAApC,CAAOU,eAAP,cAAOA,eAAP,CACA,iBAA8Bd,UAAU,CAACM,uBAAD,CAAxC,CAAOS,mBAAP,cAAOA,mBAAP,CACA,iBAA2Bf,UAAU,CAACO,mBAAD,CAArC,CAAOS,gBAAP,cAAOA,gBAAP,CACA,iBAAwBhB,UAAU,CAACQ,oBAAD,CAAlC,CAAOS,aAAP,cAAOA,aAAP,CAEA,cAA2ClB,QAAQ,CAAC,EAAD,CAAnD,wCAAOmB,WAAP,eAAoBC,mBAApB,eAEA,GAAIC,CAAAA,GAAJ,CACA,GAAIC,CAAAA,qBAAqB,CAAG,EAA5B,CACA,GAAIT,WAAW,GAAK,OAApB,CAA6B,CACzBQ,GAAG,CAAGV,UAAN,CACAW,qBAAqB,CAAG,sBAAxB,CACH,CAHD,IAIK,CACDD,GAAG,CAAGT,WAAN,CACAU,qBAAqB,CAAG,wBAAxB,CACH,CAEDpB,SAAS,CAAC,UAAM,CACZ,GAAGiB,WAAW,CAACI,MAAZ,EAAsB,CAAzB,CAA2B,CACnB,GAAMC,CAAAA,KAAK,CAAGC,UAAU,CAAG,UAAM,CACjCtB,KAAK,CAACuB,GAAN,CAAUL,GAAG,CAAGF,WAAhB,EAA6BQ,IAA7B,CAAkC,SAAAC,QAAQ,CAAI,CAC1C,GAAMC,CAAAA,SAAS,CAAGD,QAAQ,CAACE,IAAT,CAAcC,OAAhC,CACA,GAAIlB,WAAW,GAAK,OAApB,CAA6B,CAC7BC,kBAAkB,CAACe,SAAD,CAAlB,CACC,CAFD,IAGK,CACLd,eAAe,CAACc,SAAD,CAAf,CACC,CACJ,CARD,EASC,CAVuB,CAUrB,IAVqB,CAAxB,CAWJ,MAAM,kBAAMG,CAAAA,YAAY,CAACR,KAAD,CAAlB,EAAN,CACH,CAbD,IAcI,CACIV,kBAAkB,CAACE,mBAAD,CAAlB,CACAD,eAAe,CAACE,gBAAD,CAAf,CACP,CACL;AACA;AACA;AACA;AACC,CAvBQ,CAuBP,CAACE,WAAD,CAAcN,WAAd,CAvBO,CAAT,CAyBA,mBACI,YAAK,SAAS,CAAG,aAAjB,CAA8B,KAAK,CAAE,CAACoB,OAAO,CAAEf,aAAV,CAArC,uBACA,YAAK,EAAE,CAAG,sBAAV,uBACI,cAAO,IAAI,CAAG,MAAd,CACC,SAAS,CAAG,YADb,CAEC,WAAW,CAAII,qBAFhB,CAGC,QAAQ,CAAI,kBAACY,KAAD,CAAW,CAChBd,mBAAmB,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB,CACP,CALD,EADJ,EADA,EADJ,CAcH,CAED,cAAe1B,CAAAA,MAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { MovieContext, TVContext, LocationURLContext, onPageLoadMoviesContext, onPageLoadTVContext, showSearchBarContext } from '../Context';\r\n\r\nfunction Search() {\r\n    const url_movies = \"https://api.themoviedb.org/3/search/movie?api_key=ea51221982d56a556eae4bf95cbfc41d&query=\";\r\n    const url_tvshows = \"https://api.themoviedb.org/3/search/tv?api_key=ea51221982d56a556eae4bf95cbfc41d&query=\";\r\n    \r\n    const {locationURL} = useContext(LocationURLContext);\r\n    const {setGlobalMovieList} = useContext(MovieContext);\r\n    const {setGlobalTVList} = useContext(TVContext);\r\n    const {movieListOnPageLoad} = useContext(onPageLoadMoviesContext);\r\n    const {TVListOnPageLoad} = useContext(onPageLoadTVContext);\r\n    const {showSearchBar} = useContext(showSearchBarContext);\r\n\r\n    const [searchQuery, setSearchQueryState] = useState(\"\");\r\n\r\n    var url;\r\n    var searchPlaceholderText = \"\";\r\n    if (locationURL === \"movie\") {\r\n        url = url_movies;\r\n        searchPlaceholderText = \"search for movies...\";\r\n    }\r\n    else {\r\n        url = url_tvshows;\r\n        searchPlaceholderText = \"search for TV shows...\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(searchQuery.length >= 3){\r\n                const delay = setTimeout ( () => {\r\n                axios.get(url + searchQuery).then(response => {\r\n                    const movieList = response.data.results;\r\n                    if (locationURL === \"movie\") {\r\n                    setGlobalMovieList(movieList);\r\n                    }\r\n                    else {\r\n                    setGlobalTVList(movieList);\r\n                    }\r\n                })\r\n                }, 1000);\r\n            return() => clearTimeout(delay);\r\n        }\r\n        else{\r\n                setGlobalMovieList(movieListOnPageLoad);\r\n                setGlobalTVList(TVListOnPageLoad);\r\n        }\r\n    // Attributes in the array below define when the search should be triggered\r\n    // The second argument defines that the search should be triggered whenever user switches between\r\n    // \"Movies\" and \"TV Shows\" tabs.\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[searchQuery, locationURL]);\r\n    \r\n    return (\r\n        <div classList = \"searchWrap \"style={{display: showSearchBar}}>\r\n        <div id = \"search_bar_container\">\r\n            <input type = \"text\" \r\n             className = \"search_bar\" \r\n             placeholder = {searchPlaceholderText} \r\n             onChange = {(event) => {\r\n                    setSearchQueryState(event.target.value);\r\n            }\r\n            }>\r\n            </input>   \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n"]},"metadata":{},"sourceType":"module"}