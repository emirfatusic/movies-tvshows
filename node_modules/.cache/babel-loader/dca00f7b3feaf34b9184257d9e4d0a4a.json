{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emir\\\\Desktop\\\\movies and tv shows app\\\\movies-tvshows-db\\\\src\\\\Components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { MovieContext, TVContext, LocationURLContext, onPageLoadMoviesContext, onPageLoadTVContext, showSearchBarContext } from '../Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search() {\n  _s();\n\n  const url_movies = \"https://api.themoviedb.org/3/search/movie?api_key=ea51221982d56a556eae4bf95cbfc41d&query=\";\n  const url_tvshows = \"https://api.themoviedb.org/3/search/tv?api_key=ea51221982d56a556eae4bf95cbfc41d&query=\";\n  const {\n    locationURL\n  } = useContext(LocationURLContext);\n  const {\n    setGlobalMovieList\n  } = useContext(MovieContext);\n  const {\n    setGlobalTVList\n  } = useContext(TVContext);\n  const {\n    movieListOnPageLoad\n  } = useContext(onPageLoadMoviesContext);\n  const {\n    TVListOnPageLoad\n  } = useContext(onPageLoadTVContext);\n  const {\n    showSearchBar\n  } = useContext(showSearchBarContext);\n  const [searchQuery, setSearchQueryState] = useState(\"\");\n  var url;\n  var searchPlaceholderText = \"\";\n\n  if (locationURL === \"movie\") {\n    url = url_movies;\n    searchPlaceholderText = \"search for movies...\";\n  } else {\n    url = url_tvshows;\n    searchPlaceholderText = \"search for TV shows...\";\n  }\n\n  useEffect(() => {\n    if (searchQuery.length >= 3) {\n      const delay = setTimeout(() => {\n        axios.get(url + searchQuery).then(response => {\n          const movieList = response.data.results;\n\n          if (locationURL === \"movie\") {\n            setGlobalMovieList(movieList);\n          } else {\n            setGlobalTVList(movieList);\n          }\n        });\n      }, 1000);\n      return () => clearTimeout(delay);\n    } else {\n      setGlobalMovieList(movieListOnPageLoad);\n      setGlobalTVList(TVListOnPageLoad);\n    } // Attributes in the array below define when the search should be triggered\n    // The second argument defines that the search should be triggered whenever user switches between\n    // \"Movies\" and \"TV Shows\" tabs.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [searchQuery, locationURL]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    classList: \"searchWrap \",\n    style: {\n      display: showSearchBar\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"search_bar_container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search_bar\",\n        placeholder: searchPlaceholderText,\n        onChange: event => {\n          setSearchQueryState(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Search, \"dN59ih3C5hinnW277JkVMzkZ9OI=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/Emir/Desktop/movies and tv shows app/movies-tvshows-db/src/Components/Search.js"],"names":["React","useState","useContext","useEffect","axios","MovieContext","TVContext","LocationURLContext","onPageLoadMoviesContext","onPageLoadTVContext","showSearchBarContext","Search","url_movies","url_tvshows","locationURL","setGlobalMovieList","setGlobalTVList","movieListOnPageLoad","TVListOnPageLoad","showSearchBar","searchQuery","setSearchQueryState","url","searchPlaceholderText","length","delay","setTimeout","get","then","response","movieList","data","results","clearTimeout","display","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,kBAAlC,EAAsDC,uBAAtD,EAA+EC,mBAA/E,EAAoGC,oBAApG,QAAgI,YAAhI;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AACd,QAAMC,UAAU,GAAG,2FAAnB;AACA,QAAMC,WAAW,GAAG,wFAApB;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAgBZ,UAAU,CAACK,kBAAD,CAAhC;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAuBb,UAAU,CAACG,YAAD,CAAvC;AACA,QAAM;AAACW,IAAAA;AAAD,MAAoBd,UAAU,CAACI,SAAD,CAApC;AACA,QAAM;AAACW,IAAAA;AAAD,MAAwBf,UAAU,CAACM,uBAAD,CAAxC;AACA,QAAM;AAACU,IAAAA;AAAD,MAAqBhB,UAAU,CAACO,mBAAD,CAArC;AACA,QAAM;AAACU,IAAAA;AAAD,MAAkBjB,UAAU,CAACQ,oBAAD,CAAlC;AAEA,QAAM,CAACU,WAAD,EAAcC,mBAAd,IAAqCpB,QAAQ,CAAC,EAAD,CAAnD;AAEA,MAAIqB,GAAJ;AACA,MAAIC,qBAAqB,GAAG,EAA5B;;AACA,MAAIT,WAAW,KAAK,OAApB,EAA6B;AACzBQ,IAAAA,GAAG,GAAGV,UAAN;AACAW,IAAAA,qBAAqB,GAAG,sBAAxB;AACH,GAHD,MAIK;AACDD,IAAAA,GAAG,GAAGT,WAAN;AACAU,IAAAA,qBAAqB,GAAG,wBAAxB;AACH;;AAEDpB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGiB,WAAW,CAACI,MAAZ,IAAsB,CAAzB,EAA2B;AACnB,YAAMC,KAAK,GAAGC,UAAU,CAAG,MAAM;AACjCtB,QAAAA,KAAK,CAACuB,GAAN,CAAUL,GAAG,GAAGF,WAAhB,EAA6BQ,IAA7B,CAAkCC,QAAQ,IAAI;AAC1C,gBAAMC,SAAS,GAAGD,QAAQ,CAACE,IAAT,CAAcC,OAAhC;;AACA,cAAIlB,WAAW,KAAK,OAApB,EAA6B;AAC7BC,YAAAA,kBAAkB,CAACe,SAAD,CAAlB;AACC,WAFD,MAGK;AACLd,YAAAA,eAAe,CAACc,SAAD,CAAf;AACC;AACJ,SARD;AASC,OAVuB,EAUrB,IAVqB,CAAxB;AAWJ,aAAM,MAAMG,YAAY,CAACR,KAAD,CAAxB;AACH,KAbD,MAcI;AACIV,MAAAA,kBAAkB,CAACE,mBAAD,CAAlB;AACAD,MAAAA,eAAe,CAACE,gBAAD,CAAf;AACP,KAlBW,CAmBhB;AACA;AACA;AACA;;AACC,GAvBQ,EAuBP,CAACE,WAAD,EAAcN,WAAd,CAvBO,CAAT;AAyBA,sBACI;AAAK,IAAA,SAAS,EAAG,aAAjB;AAA8B,IAAA,KAAK,EAAE;AAACoB,MAAAA,OAAO,EAAEf;AAAV,KAArC;AAAA,2BACA;AAAK,MAAA,EAAE,EAAG,sBAAV;AAAA,6BACI;AAAO,QAAA,IAAI,EAAG,MAAd;AACC,QAAA,SAAS,EAAG,YADb;AAEC,QAAA,WAAW,EAAII,qBAFhB;AAGC,QAAA,QAAQ,EAAKY,KAAD,IAAW;AAChBd,UAAAA,mBAAmB,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB;AACP;AALD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GA/DQ1B,M;;KAAAA,M;AAiET,eAAeA,MAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { MovieContext, TVContext, LocationURLContext, onPageLoadMoviesContext, onPageLoadTVContext, showSearchBarContext } from '../Context';\r\n\r\nfunction Search() {\r\n    const url_movies = \"https://api.themoviedb.org/3/search/movie?api_key=ea51221982d56a556eae4bf95cbfc41d&query=\";\r\n    const url_tvshows = \"https://api.themoviedb.org/3/search/tv?api_key=ea51221982d56a556eae4bf95cbfc41d&query=\";\r\n    \r\n    const {locationURL} = useContext(LocationURLContext);\r\n    const {setGlobalMovieList} = useContext(MovieContext);\r\n    const {setGlobalTVList} = useContext(TVContext);\r\n    const {movieListOnPageLoad} = useContext(onPageLoadMoviesContext);\r\n    const {TVListOnPageLoad} = useContext(onPageLoadTVContext);\r\n    const {showSearchBar} = useContext(showSearchBarContext);\r\n\r\n    const [searchQuery, setSearchQueryState] = useState(\"\");\r\n\r\n    var url;\r\n    var searchPlaceholderText = \"\";\r\n    if (locationURL === \"movie\") {\r\n        url = url_movies;\r\n        searchPlaceholderText = \"search for movies...\";\r\n    }\r\n    else {\r\n        url = url_tvshows;\r\n        searchPlaceholderText = \"search for TV shows...\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(searchQuery.length >= 3){\r\n                const delay = setTimeout ( () => {\r\n                axios.get(url + searchQuery).then(response => {\r\n                    const movieList = response.data.results;\r\n                    if (locationURL === \"movie\") {\r\n                    setGlobalMovieList(movieList);\r\n                    }\r\n                    else {\r\n                    setGlobalTVList(movieList);\r\n                    }\r\n                })\r\n                }, 1000);\r\n            return() => clearTimeout(delay);\r\n        }\r\n        else{\r\n                setGlobalMovieList(movieListOnPageLoad);\r\n                setGlobalTVList(TVListOnPageLoad);\r\n        }\r\n    // Attributes in the array below define when the search should be triggered\r\n    // The second argument defines that the search should be triggered whenever user switches between\r\n    // \"Movies\" and \"TV Shows\" tabs.\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[searchQuery, locationURL]);\r\n    \r\n    return (\r\n        <div classList = \"searchWrap \"style={{display: showSearchBar}}>\r\n        <div id = \"search_bar_container\">\r\n            <input type = \"text\" \r\n             className = \"search_bar\" \r\n             placeholder = {searchPlaceholderText} \r\n             onChange = {(event) => {\r\n                    setSearchQueryState(event.target.value);\r\n            }\r\n            }>\r\n            </input>   \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n"]},"metadata":{},"sourceType":"module"}